main ()
{ int x;
  for(x=0;x<3;x++)
  {
   fork();
   printf("The process ID (PID): %d \n",getpid());
   sleep(5);
  }
}


mark@n-VoitovMR:~$ nano main.c
mark@n-VoitovMR:~$ gcc main.c
mark@n-VoitovMR:~$ ./a.out &
[1] 41
mark@n-VoitovMR:~$ pid: 42
pid: 41
pid: 42
pid: 41
pid: 43
pid: 44
pid: 42
pid: 41
pid: 45
pid: 46
pid: 43
pid: 47
pid: 44
pid: 48

[1]+  Done                    ./a.out
mark@n-VoitovMR:~$ pstree
init---init---bash---pstree
mark@n-VoitovMR:~$ nano main.c
mark@n-VoitovMR:~$ gcc main.c
mark@n-VoitovMR:~$ ./a.out &
[1] 56
mark@n-VoitovMR:~$ pid: 57
pid: 56
pid: 56
pid: 59
pid: 57
pid: 58
pid: 59
pid: 56
pid: 60
pid: 61
pid: 57
pid: 62
pid: 58
pid: 63
pid: 56
pid: 59
pid: 65
pid: 64
pid: 60
pid: 61
pid: 66
pid: 67
pid: 57
pid: 68
pid: 62
pid: 69
pid: 58
pid: 70
pid: 63
pid: 71
pid: 65
pid: 74
pid: 59
pid: 56
pid: 73
pid: 72
pid: 64
pid: 75
pid: 66
pid: 77
pid: 60
pid: 76
pid: 57
pid: 80
pid: 68
pid: 81
pid: 67
pid: 79
pid: 58
pid: 82
pid: 71
pid: 83
pid: 70
pid: 84
pid: 63
pid: 85
pid: 69
pid: 86
pid: 62
pid: 87
pid: 61
pid: 78

[1]+  Done                    ./a.out
mark@n-VoitovMR:~$ pstree
init---init---bash---pstree
mark@n-VoitovMR:~$ history
  309  nano main.c
  310  gcc main.c
  311  ./a.out &
  312  pstree
  313  nano main.c
  314  gcc main.c
  315  ./a.out &
  316  pstree
  317  history


Команда pstree не отображает процесс в дереве процессов.
Что-то либо с запуском в фоновом режиме ./a.out &.
Либо какая-то ошибка в коде программы.
Таймаут sleep(5) отрабатывает корректно - результат каждой итерации цикла выводится после 5 секунд ожидания.
Перед повторным запуском программы выражение x<3 заменено на x<5.

При первоначальном выполнении задания, когда у меня ещё не был готов код, количество создаваемых программой процессов я рассчитал, как 2^3 = 8.
При выполнении кода получается другой расчёт. 
При выполнении кода системный вызов fork() создает дочерний элемент, который выполняет тот же код, что и родительский.
С этого момента есть 2 процесса, выполняющих следующую строку: parent и child. Каждый из них выполняет printf().
Во второй раз цикл for выполняется родителем и потомком : каждый из них выполняет fork(), и поэтому с этого момента есть 4 процесса: 2 первых и их новые потомки.
Таким образом, для каждой итерации в цикле удваивается количество процессов.

Для первого случая при x<3
Выполняется printf() внутри цикла for:
- 3 раза за первые 2 процесса;
- 2 раз для своих child (2 процесса);
- 1 раз для следующего поколения (4 новых child).
3*2 + 2*2 + 1*4 = 14.
print(f) выполняется 14 раз.

Для второго случая при x<5:
Выполняется printf() внутри цикла for:
- 5 раза за первые 2 процесса;
- 4 раза для своих child (2 процесса);
- 3 раза для следующего поколения (4 новых child);
- 2 раза для следующего поколения (8 новых child);
- 1 раз для следующего поколения (16 новых child).
5*2 + 4*2 + 3*4 + 2*8 + 1*16 = 62.
print(f) выполняется 62 раза. 
